#include <std/mem.pat>
#include <std/string.pat>
#include <std/core.pat>
#pragma loop_limit 99999

fn is_zero(u32 count) {
    u32 offset = 0;

    for (u32 i = 0, i < count, i += 1) {
        u8 read_byte = std::mem::read_unsigned($ + offset, 1);

        if (read_byte != 0) {
            return false;
        }

        offset += 1;
    }

    return true;
};

fn count_zeros(u32 address) {
    u32 count = 0;
    while(!std::mem::eof()) {
        u8 read_byte = std::mem::read_unsigned($, 1);
        if (read_byte != 0x00) break;
        count += 1;
        $ += 1;
    }
    $ = address;
    return count;
};

struct SkipRequired<auto Value, auto Padding> {
    char read_value[std::string::length(Value)] [[no_unique_address]];

    if (read_value == Value) {
        padding[Padding];
    } else {
        std::warning("Could not find required value!");
    }
} [[sealed, hidden, no_unique_address]];

struct SkipZero<auto Count> {
    if (is_zero(Count)) {
        padding[Count];
    } else {
        std::print("Value was not zero! {:#16x}", $);
        padding[Count];
    }
} [[sealed, hidden, no_unique_address]];

struct Skip0 {
    u32 length = count_zeros($);
    padding[while(!std::mem::eof() && std::mem::read_unsigned($, 1) == 0x0)];
};

struct Skip1 {
    padding[while(!std::mem::eof() && std::mem::read_unsigned($, 1) == 0x1)];
};

struct Skip01 {
    padding[while(std::mem::read_unsigned($, 1) == 0x0 || std::mem::read_unsigned($, 1) == 0x1)];
};

struct Vector {
    float x;
    float y;
    float z;
};

struct Transform {
    Vector position;
    Vector rotation;
};

struct MainCameraNums {
    u8 num1;
    u8 num2;
    u8 num3;
    u8 num4;
};

struct CameraData {
    float values1[17];
    MainCameraNums nums1;
    float values2[2];
    MainCameraNums nums2;
    float values3[2];
    MainCameraNums nums3;
};

struct MainCameraElement {
    char name[];
    if (parent.num == 0xAF) {
        float values[22];
        u32 num1;
        Skip0;
    } else {
        u32 camera_datas_count = 6;
        if (parent.num == 0xB9) {
            camera_datas_count = 5;
        }
        float values1[7];
        u8 num1;
        u8 num2;
        u8 num3;
        u8 num4;
        MainCameraNums nums1;
        float values2[8];
        MainCameraNums nums2;
        float values3[2];
        MainCameraNums nums3;
        float values4[2];
        MainCameraNums nums4;
        CameraData camera_datas[camera_datas_count];
        float values5[11];
        u8 num5;
        Skip0;
    }
};

struct LightBlock {
    float values[13];
    u32 num;
};

struct Name {
    char value[];
};

struct CityFooter {
    Name names[8];
    float values[5];
};

struct TextureElement {
    char name[];
    u32 width;
    u32 height;
    u32 size = width * height;
    u8 texture_data[size];
};

struct Script {
    char event_name[];
    char script_path[];
};

struct ScriptElement {
    u32 script_count;
    Script scripts[script_count];
    Skip0;
};

struct WaterData {
    char name[];
    SkipZero<3>;
    u32 num1;
    float values[11];
    u32 num2;
};

struct WaterElement {
    u32 water_element_count;
    u32 height_width;
    u32 height_height;
    u8 data[parent.size];
    WaterData water_datas[water_element_count];
};

struct CityElement {
    u32 size = parent.map_width * parent.map_height;
    u8 height_data1[size];
    if (parent.parent.num != 0xBA) {
        u32 num1;
        SkipZero<1>;
        u8 num2;
        bool flag1;
        u8 height_data2[size * 4];
        SkipZero<1>;
    }
    u8 has_water_element;
    if (has_water_element == 0x1) {
        WaterElement water_element;
    }
    TextureElement texture_element;
    CityFooter footer;
};

struct ContactElement {
    bool flag1;
    bool flag2;
    Vector vectors[3];
    float value;
};

struct DummyElement {
    bool flag1;
    Transform transform;
    bool flag2; //extra transform?
    u32 transform_count = 10;
    if (flag2)
        transform_count = 11;
    Transform transforms[transform_count];
};

struct CameraElement {
    bool flag1;
    Transform transform;
    bool flag2;
    Transform transforms[11];
};

struct ObjectElement {
    bool flag1;
    SkipZero<1>;
    bool flag2;
    bool flag3;
    u8 num1;
    bool flag4;
    if (parent.parent.num != 0xAF) {
        u8 flag5;
        u8 flag6;
    }
    u8 num2;
    SkipZero<1>;
    bool flag7;
    SkipZero<1>;
    bool has_object_name;
    SkipZero<3>;
    if (has_object_name) {
        char object_name[];
    }
    Transform transform;
    bool flag8; //extra transform?
    u32 transform_count = 10;
    if (flag8)
        transform_count = 11;
    Transform transforms[transform_count];
};

struct LightElement {
    u32 block_count = 8;
    if (parent.parent.num == 0xB9 || parent.parent.num == 0xAF) {
        block_count = 7;
    }
    bool flag1;
    bool flag2;
    bool is_not_r_light;
    LightBlock blocks[block_count];
};

struct SceneElement {
    if (std::mem::read_unsigned($ + 1, 1) != 0x1) {
        $ -= 1;
    }
    bool continue_group;
    SkipRequired<"\x01", 1>;
    char name[];
    u32 map_width;
    if (parent.num != 0xAF) {
        u32 map_height;
    }
    u32 type;
    if (type == 0x40 || type == 0x80 || type == 0x100) {
        CityElement city_element;
    } else if (type == 0x0) {
        ContactElement contact_element;
    } else if (type == 0x2) {
        DummyElement dummy_element;
    } else if (type == 0x3) {
        CameraElement camera_element;
    } else if (type == 0x4) {
        ObjectElement object_element;
    } else if (type == 0x5 || type == 0x6 || type == 0x7 || type == 0x8) {
        LightElement light_element;
    }
    Skip0 skip0;
    u8 padding_length = skip0.length;
    ScriptElement script_elements[while(
        std::mem::read_unsigned($, 1) != 0x0 &&
        std::mem::read_unsigned($ + 1, 1) == 0x0
    )];
};

struct ElementGroup {
    SceneElement first_element;
    SceneElement elements[while(std::mem::read_unsigned($, 2) == 0x101)];
};

struct Ed3 {
    u8 num;
    if (num != 0xBB && num != 0xBA && num != 0xB9 && num != 0xAF) {
        std::warning("Unknown scene type");
    }
    SkipRequired<"\x00\x6C\x3A", 3>;
    MainCameraElement camera;
    SceneElement scene_elements[while(!std::mem::eof())];
    
};


Ed3 ed3 @ $;